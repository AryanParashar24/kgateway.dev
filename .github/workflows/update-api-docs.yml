name: Update Reference Documentation

on:
  workflow_dispatch:  # Allow manual triggers for now
  # Later we can add:
  # push:
  #   paths:
  #     - 'api/v1alpha1/**'
  #   branches:
  #     - main

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/kgateway.dev
          path: kgateway.dev

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install PyYAML

      - name: Parse versions from hugo.yaml
        run: |
          cd kgateway.dev
          python3 -c "
          import yaml
          import json
          
          with open('hugo.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          versions = config.get('params', {}).get('versions', [])
          version_data = []
          
          for version in versions:
              version_info = {
                  'version': version.get('version'),
                  'linkVersion': version.get('linkVersion'),
                  'url': version.get('url', '').lstrip('/')
              }
              version_data.append(version_info)
          
          print(json.dumps(version_data))
          " > versions.json
          
          echo "Parsed versions:"
          cat versions.json

      - name: Read max Kubernetes version
        run: |
          KUBE_VERSION=$(cat kgateway.dev/assets/docs/versions/max-kube.md | tr -d '\n')
          echo "KUBE_VERSION=$KUBE_VERSION" >> $GITHUB_ENV

      - name: Generate docs for each version
        run: |
          cd kgateway.dev
          
          # Read versions from JSON file
          versions=$(cat versions.json)
          
          # Process each version
          echo "$versions" | python3 -c "
          import json
          import sys
          import subprocess
          import os
          
          versions = json.load(sys.stdin)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'Processing version: {version} (linkVersion: {link_version}, path: {url_path})')
              
              # Determine tag to checkout based on linkVersion
              if link_version == 'main':
                  tag = 'main'  # Use main branch when linkVersion is 'main'
              else:
                  # For other linkVersions, get the latest tag matching the version pattern
                  try:
                      result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git', f'{version}*'], 
                                            capture_output=True, text=True, check=True)
                      if result.stdout.strip():
                          latest_tag = result.stdout.split('\n')[0].split('/')[-1]
                          tag = latest_tag
                      else:
                          print(f'No tags found for version {version}, skipping')
                          continue
                  except subprocess.CalledProcessError as e:
                      print(f'Error fetching tags for version {version}: {e}')
                      continue
              
              print(f'Using tag: {tag}')
              
              # Checkout kgateway repository with specific tag
              kgateway_dir = f'kgateway-{link_version}'
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              
              # Set environment variables for this version
              os.environ['KGATEWAY_DIR'] = kgateway_dir
              os.environ['VERSION_PATH'] = url_path
              os.environ['LINK_VERSION'] = link_version
              os.environ['VERSION_TAG'] = tag
              
              print(f'Generated docs for version {version} using tag {tag}')
          "

      - name: Generate API Reference for each version
        run: |
          cd kgateway.dev
          
          # Process each version
          echo "$(cat versions.json)" | python3 -c "
          import json
          import sys
          import subprocess
          import os
          
          versions = json.load(sys.stdin)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'Generating API docs for version: {version}')
              
              # Determine tag to checkout based on linkVersion
              if link_version == 'main':
                  tag = 'main'  # Use main branch when linkVersion is 'main'
              else:
                  # For other linkVersions, get the latest tag matching the version pattern
                  try:
                      result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git', f'{version}*'], 
                                            capture_output=True, text=True, check=True)
                      if result.stdout.strip():
                          latest_tag = result.stdout.split('\n')[0].split('/')[-1]
                          tag = latest_tag
                      else:
                          print(f'No tags found for version {version}, skipping')
                          continue
                  except subprocess.CalledProcessError as e:
                      print(f'Error fetching tags for version {version}: {e}')
                      continue
              
              # Checkout kgateway repository with specific tag
              kgateway_dir = f'kgateway-{link_version}'
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              
              # Generate API docs for this version
              print(f'Generating API docs for {version} using {kgateway_dir}')
              
              # Substitute KUBE_VERSION in the config template and write to a temp file
              subprocess.run(['envsubst'], input=open('scripts/crd-ref-docs-config.yaml').read(), text=True, stdout=open(f'crd-ref-docs-config-{link_version}.yaml', 'w'))
              
              # Generate API reference
              subprocess.run([
                  'go', 'run', 'github.com/elastic/crd-ref-docs@v0.1.0',
                  f'--source-path={kgateway_dir}/api/v1alpha1/',
                  '--renderer=markdown',
                  '--output-path=./',
                  f'--config=crd-ref-docs-config-{link_version}.yaml'
              ], check=True)
              
              # Create versioned directory
              os.makedirs(f'content/docs/{url_path}/reference/', exist_ok=True)
              
              # Create index file with frontmatter
              frontmatter = '''---
title: API reference
weight: 10
---

'''
              with open('./out.md', 'r') as f:
                  content = f.read()
              
              with open(f'content/docs/{url_path}/reference/api.md', 'w') as f:
                  f.write(frontmatter + content)
              
              # Remove temporary files
              os.remove('./out.md')
              os.remove(f'crd-ref-docs-config-{link_version}.yaml')
              
              # Format generated docs using Python instead of sed
              with open(f'content/docs/{url_path}/reference/api.md', 'r') as f:
                  content = f.read()
              
              # Apply formatting fixes
              content = content.replace('Required: {}', 'Required')
              content = content.replace('Optional: {}', 'Optional')
              
              # Fix YAML formatting issues
              lines = content.split('\n')
              fixed_lines = []
              in_yaml_block = False
              
              for line in lines:
                  if '```yaml<br />' in line:
                      in_yaml_block = True
                      continue
                  elif in_yaml_block and line.strip() == '```':
                      in_yaml_block = False
                      continue
                  elif in_yaml_block:
                      # Fix indentation and formatting
                      line = line.replace('<br />', '')
                      line = line.replace('\t', '  ')
                      if line.strip() == '':
                          continue
                      fixed_lines.append(line)
                  else:
                      fixed_lines.append(line)
              
              # Remove API Reference header
              final_lines = []
              skip_header = False
              for line in fixed_lines:
                  if line.strip() == '# API Reference':
                      skip_header = True
                      continue
                  elif skip_header and line.strip() == '':
                      skip_header = False
                      continue
                  elif not skip_header:
                      final_lines.append(line)
              
              with open(f'content/docs/{url_path}/reference/api.md', 'w') as f:
                  f.write('\n'.join(final_lines))
              
              print(f'Generated API docs for version {version} in content/docs/{url_path}/reference/api.md')
          "

      - name: Generate Helm Chart Reference for each version
        run: |
          cd kgateway.dev
          
          # Process each version
          echo "$(cat versions.json)" | python3 -c "
          import json
          import sys
          import subprocess
          import os
          
          versions = json.load(sys.stdin)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'Generating Helm docs for version: {version}')
              
              # Determine tag to checkout based on linkVersion
              if link_version == 'main':
                  tag = 'main'  # Use main branch when linkVersion is 'main'
              else:
                  # For other linkVersions, get the latest tag matching the version pattern
                  try:
                      result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git', f'{version}*'], 
                                            capture_output=True, text=True, check=True)
                      if result.stdout.strip():
                          latest_tag = result.stdout.split('\n')[0].split('/')[-1]
                          tag = latest_tag
                      else:
                          print(f'No tags found for version {version}, skipping')
                          continue
                  except subprocess.CalledProcessError as e:
                      print(f'Error fetching tags for version {version}: {e}')
                      continue
              
              # Checkout kgateway repository with specific tag
              kgateway_dir = f'kgateway-{link_version}'
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              
              print(f'Looking for Helm directory in {kgateway_dir}:')
              subprocess.run(['ls', '-la', f'{kgateway_dir}/install/helm/kgateway'], check=False)
              
              # Create directory for Helm docs
              os.makedirs(f'content/docs/{url_path}/reference/helm/', exist_ok=True)
              
              # Generate Helm Docs with helm-docs
              for chart in ['kgateway:helm', 'kgateway-crds:crds']:
                dir_name, file_name = chart.split(':')
                print(f'Generating Helm docs for {dir_name} -> {file_name}')
                
                # Generate helm docs
                result = subprocess.run([
                  'go', 'run', 'github.com/norwoodj/helm-docs/cmd/helm-docs@v1.14.2',
                  '--chart-search-root', f'{kgateway_dir}/install/helm/{dir_name}',
                  '--dry-run'
                ], capture_output=True, text=True, check=True)
                
                # Write to versioned file
                with open(f'content/docs/{url_path}/reference/helm/{file_name}.md', 'w') as f:
                  f.write(result.stdout)
                
                # Remove badge line and following empty line using Python
                with open(f'content/docs/{url_path}/reference/helm/{file_name}.md', 'r') as f:
                  lines = f.readlines()
                
                filtered_lines = []
                skip_next = False
                for line in lines:
                    if '![Version:' in line:
                        skip_next = True
                        continue
                    elif skip_next and line.strip() == '':
                        skip_next = False
                        continue
                    elif not skip_next:
                        # Remove backticks from the Default column in the table
                        line = line.replace('| `', '| ').replace('` |', ' |')
                        filtered_lines.append(line)
                
                with open(f'content/docs/{url_path}/reference/helm/{file_name}.md', 'w') as f:
                  f.writelines(filtered_lines)
              
              print(f'Generated Helm docs for version {version} in content/docs/{url_path}/reference/helm/')
          "

      - name: Generate Control Plane Metrics Documentation for each version
        run: |
          cd kgateway.dev
          
          # Process each version
          echo "$(cat versions.json)" | python3 -c "
          import json
          import sys
          import subprocess
          import os
          
          versions = json.load(sys.stdin)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'Generating metrics docs for version: {version}')
              
              # Determine tag to checkout based on linkVersion
              if link_version == 'main':
                  tag = 'main'  # Use main branch when linkVersion is 'main'
              else:
                  # For other linkVersions, get the latest tag matching the version pattern
                  try:
                      result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git', f'{version}*'], 
                                            capture_output=True, text=True, check=True)
                      if result.stdout.strip():
                          latest_tag = result.stdout.split('\n')[0].split('/')[-1]
                          tag = latest_tag
                      else:
                          print(f'No tags found for version {version}, skipping')
                          continue
                  except subprocess.CalledProcessError as e:
                      print(f'Error fetching tags for version {version}: {e}')
                      continue
              
              # Checkout kgateway repository with specific tag
              kgateway_dir = f'kgateway-{link_version}'
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              
              print(f'Changed to kgateway repository: {kgateway_dir}')
              
              # Create versioned snippets directory
              os.makedirs(f'assets/docs/snippets/{link_version}', exist_ok=True)
              
              # Run the metrics finder tool
              result = subprocess.run([
                  'go', 'run', f'./{kgateway_dir}/pkg/metrics/cmd/findmetrics/main.go', 
                  '--markdown', f'./{kgateway_dir}'
              ], capture_output=True, text=True, check=True)
              
              # Write to versioned file
              with open(f'assets/docs/snippets/{link_version}/metrics-control-plane.md', 'w') as f:
                  f.write(result.stdout)
              
              print(f'Generated metrics documentation for version {version}:')
              print(result.stdout[:500] + '...' if len(result.stdout) > 500 else result.stdout)
          "

      - name: Clean up temporary directories
        run: |
          cd kgateway.dev
          rm -rf kgateway-*

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: kgateway.dev
          commit-message: "docs: Update API, Helm, and Metrics reference docs for all versions"
          signoff: true
          title: "Update API, Helm, and Metrics reference docs for all versions"
          body: |
            Automated API, Helm, and Metrics documentation update for all supported versions based on the latest tags from the **kgateway** repository.
            
            This PR was automatically generated by the [**Update Reference documentation** workflow](https://github.com/kgateway-dev/kgateway.dev/actions/workflows/update-api-docs.yml).
            
            **Versions updated:**
            - Generated docs for all versions defined in `hugo.yaml`
            - Each version uses the latest corresponding tag from the kgateway repository
            - Docs are placed in versioned directories (`content/docs/{VERSION}/` and `assets/docs/snippets/{VERSION}/`)
          branch: api-gen-update
          branch-suffix: timestamp
          delete-branch: true
          base: main
          labels: |
            documentation
            automated pr