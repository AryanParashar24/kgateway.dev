name: Update Reference Documentation

on:
  workflow_dispatch:  # Allow manual triggers for now
  # Later we can add:
  # push:
  #   paths:
  #     - 'api/v1alpha1/**'
  #   branches:
  #     - main

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout docs repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/kgateway.dev
          path: kgateway.dev

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          cache: false

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: pip install PyYAML

      - name: Parse versions from hugo.yaml
        run: |
          cd kgateway.dev
          python3 -c "
          import yaml
          import json
          
          with open('hugo.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          versions = config.get('params', {}).get('versions', [])
          version_data = []
          
          for version in versions:
              version_info = {
                  'version': version.get('version'),
                  'linkVersion': version.get('linkVersion'),
                  'url': version.get('url', '').lstrip('/')
              }
              version_data.append(version_info)
          
          print(json.dumps(version_data))
          " > versions.json
          
          echo "Parsed versions:"
          cat versions.json

      - name: Read max Kubernetes version
        run: |
          KUBE_VERSION=$(cat kgateway.dev/assets/docs/versions/max-kube.md | tr -d '\n')
          echo "KUBE_VERSION=$KUBE_VERSION" >> $GITHUB_ENV

      - name: Generate docs for each version
        run: |
          cd kgateway.dev
          
          # Read versions from JSON file
          versions=$(cat versions.json)
          
          # Process each version
          echo "$versions" | python3 -c "
          import json
          import sys
          import subprocess
          import os
          
          versions = json.load(sys.stdin)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'Processing version: {version} (linkVersion: {link_version}, path: {url_path})')
              
              # Determine tag to checkout based on linkVersion
              if link_version == 'main':
                  tag = 'main'  # Use main branch when linkVersion is 'main'
              else:
                  # For other linkVersions, get the latest tag matching the version pattern
                  try:
                      result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git', f'{version}*'], 
                                            capture_output=True, text=True, check=True)
                      if result.stdout.strip():
                          latest_tag = result.stdout.split('\n')[0].split('/')[-1]
                          tag = latest_tag
                      else:
                          print(f'No tags found for version {version}, skipping')
                          continue
                  except subprocess.CalledProcessError as e:
                      print(f'Error fetching tags for version {version}: {e}')
                      continue
              
              print(f'Using tag: {tag}')
              
              # Checkout kgateway repository with specific tag
              kgateway_dir = f'kgateway-{link_version}'
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              
              # Set environment variables for this version
              os.environ['KGATEWAY_DIR'] = kgateway_dir
              os.environ['VERSION_PATH'] = url_path
              os.environ['LINK_VERSION'] = link_version
              os.environ['VERSION_TAG'] = tag
              
              print(f'Generated docs for version {version} using tag {tag}')
          "

      - name: Generate API Reference for each version
        run: |
          cd kgateway.dev
          
          # Process each version using the original working approach
          python3 << 'EOF'
          import json
          import sys
          import subprocess
          import os
          
          with open('versions.json', 'r') as f:
              versions = json.load(f)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              print(f'Generating API docs for version: {version}')
              
              # Determine tag to checkout based on linkVersion
              if link_version == 'main':
                  tag = 'main'  # Use main branch when linkVersion is 'main'
              else:
                  # For other linkVersions, get the latest tag matching the version pattern
                  try:
                      result = subprocess.run(['git', 'ls-remote', '--tags', '--sort=-version:refname', 'https://github.com/kgateway-dev/kgateway.git', f'{version}*'], 
                                            capture_output=True, text=True, check=True)
                      if result.stdout.strip():
                          latest_tag = result.stdout.split('\n')[0].split('/')[-1]
                          tag = latest_tag
                      else:
                          print(f'No tags found for version {version}, skipping')
                          continue
                  except subprocess.CalledProcessError as e:
                      print(f'Error fetching tags for version {version}: {e}')
                      continue
              
              # Checkout kgateway repository with specific tag
              kgateway_dir = f'kgateway-{link_version}'
              if tag == 'main':
                  subprocess.run(['git', 'clone', '--branch', 'main', '--depth', '1', 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              else:
                  subprocess.run(['git', 'clone', '--depth', '1', '--branch', tag, 'https://github.com/kgateway-dev/kgateway.git', kgateway_dir], check=True)
              
              # Set environment variables for this version
              os.environ['KGATEWAY_DIR'] = kgateway_dir
              os.environ['VERSION_PATH'] = url_path
              os.environ['LINK_VERSION'] = link_version
              os.environ['VERSION_TAG'] = tag
              
              print(f'Generated docs for version {version} using tag {tag}')
          EOF
          
          # Now use the original working shell commands for each version
          python3 << 'EOF'
          import json
          import subprocess
          import os
          
          with open('versions.json', 'r') as f:
              versions = json.load(f)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              # Set environment variables for this version
              os.environ['KGATEWAY_DIR'] = f'kgateway-{link_version}'
              os.environ['VERSION_PATH'] = url_path
              os.environ['LINK_VERSION'] = link_version
              
              print(f'Generating API docs for version: {version}')
              
              # Use the original working shell commands with environment variables
              subprocess.run(['bash', '-c', '''
                # Substitute KUBE_VERSION in the config template and write to a temp file
                envsubst < scripts/crd-ref-docs-config.yaml > crd-ref-docs-config-${LINK_VERSION}.yaml

                echo "Changed to docs repository: $PWD"

                go run github.com/elastic/crd-ref-docs@v0.1.0 \
                  --source-path="${KGATEWAY_DIR}/api/v1alpha1/" \
                  --renderer=markdown \
                  --output-path ./ \
                  --config=crd-ref-docs-config-${LINK_VERSION}.yaml

                # Remove the temporary config file so it is not included in the PR
                rm -f crd-ref-docs-config-${LINK_VERSION}.yaml

                # Create versioned directory
                mkdir -p content/docs/${VERSION_PATH}/reference/

                # Create index file with frontmatter
                (echo "---
title: API reference
weight: 10
---

"; cat "./out.md" ) > content/docs/${VERSION_PATH}/reference/api.md

                # Remove temporary file
                rm -f "./out.md"

                # Format generated docs
                sed -i "s/Required: \\{\\}/Required/g; s/Optional: \\{\\}/Optional/g" content/docs/${VERSION_PATH}/reference/api.md
                # Fix formatting issues in the markdown
                sed -i "
                /```yaml<br \\/>/ {
                  s/```yaml<br \\/>//
                  s/<br \\/>$//
                  /^$/d
                  s/stats:<br \\/>/stats:<br \\/>/
                  s/  customLabels:<br \\/>/\\&nbsp;\\&nbsp;customLabels:<br \\/>/
                  s/    - name:/\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;- name:/g
                  s/      metadataNamespace:/\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;metadataNamespace:/g
                  s/      metadataKey:/\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;metadataKey:/g
                  s/```//
                  /^\\s*$/d
                }" content/docs/${VERSION_PATH}/reference/api.md
                sed -i "/```yaml/,/```/{ /^```/! { s/\\t/  /g; /^\\s*$/d } }" content/docs/${VERSION_PATH}/reference/api.md
                sed -i "/^# API Reference$/,/^$/d" content/docs/${VERSION_PATH}/reference/api.md
              '''], check=True)
              
              print(f'Generated API docs for version {version} in content/docs/{url_path}/reference/api.md')
          EOF

      - name: Generate Helm Chart Reference for each version
        run: |
          cd kgateway.dev
          
          # Use the original working shell commands for each version
          python3 << 'EOF'
          import json
          import subprocess
          import os
          
          with open('versions.json', 'r') as f:
              versions = json.load(f)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              # Set environment variables for this version
              os.environ['KGATEWAY_DIR'] = f'kgateway-{link_version}'
              os.environ['VERSION_PATH'] = url_path
              os.environ['LINK_VERSION'] = link_version
              
              print(f'Generating Helm docs for version: {version}')
              
              # Use the original working shell commands with environment variables
              subprocess.run(['bash', '-c', '''
                echo "Looking for Helm directory:"
                ls -la "${KGATEWAY_DIR}/install/helm/kgateway" || echo "Helm directory not found!"
      
                # Update docs repository
                echo "Changed to docs repository: $PWD"

                # Create directory for Helm docs
                mkdir -p content/docs/${VERSION_PATH}/reference/helm/
                
                # Generate Helm Docs with helm-docs
                for chart in "kgateway:helm" "kgateway-crds:crds"; do
                  IFS=: read -r dir file <<< "$chart"
                  go run github.com/norwoodj/helm-docs/cmd/helm-docs@v1.14.2 \
                    --chart-search-root "${KGATEWAY_DIR}/install/helm/$dir" \
                    --dry-run > "content/docs/${VERSION_PATH}/reference/helm/${file}.md"

                  # Remove badge line and following empty line 
                  # (might be replaced by helm docs template in the future)
                  sed -i "/!\[Version:/,/^$/d" "content/docs/${VERSION_PATH}/reference/helm/${file}.md"

                  # Remove backticks from the Default column in the table
                  sed -i "s/| \`\\([^\`]*\\)\` |/| \\1 |/g" "content/docs/${VERSION_PATH}/reference/helm/${file}.md"
                done

                echo "=== Debug: After creating index file ==="
                echo "Content directory structure:"
                ls -la content/docs/${VERSION_PATH}/reference/helm/
              '''], check=True)
              
              print(f'Generated Helm docs for version {version} in content/docs/{url_path}/reference/helm/')
          EOF

      - name: Generate Control Plane Metrics Documentation for each version
        run: |
          cd kgateway.dev
          
          # Use the original working shell commands for each version
          python3 << 'EOF'
          import json
          import subprocess
          import os
          
          with open('versions.json', 'r') as f:
              versions = json.load(f)
          
          for version_info in versions:
              version = version_info['version']
              link_version = version_info['linkVersion']
              url_path = version_info['url']
              
              # Set environment variables for this version
              os.environ['KGATEWAY_DIR'] = f'kgateway-{link_version}'
              os.environ['VERSION_PATH'] = url_path
              os.environ['LINK_VERSION'] = link_version
              
              print(f'Generating metrics docs for version: {version}')
              
              # Use the original working shell commands with environment variables
              subprocess.run(['bash', '-c', '''
                # Generate metrics documentation from kgateway repository
                cd "${KGATEWAY_DIR}"
                echo "Changed to kgateway repository: $PWD"
                
                # Create versioned snippets directory
                mkdir -p "../kgateway.dev/assets/docs/snippets/${LINK_VERSION}"
                
                # Run the metrics finder tool
                go run ./pkg/metrics/cmd/findmetrics/main.go --markdown . > "../kgateway.dev/assets/docs/snippets/${LINK_VERSION}/metrics-control-plane.md"
                
                echo "Generated metrics documentation:"
                cat "../kgateway.dev/assets/docs/snippets/${LINK_VERSION}/metrics-control-plane.md"
              '''], check=True)
              
              print(f'Generated metrics documentation for version {version} in assets/docs/snippets/{link_version}/metrics-control-plane.md')
          EOF

      - name: Clean up temporary directories
        run: |
          cd kgateway.dev
          rm -rf kgateway-*

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: kgateway.dev
          commit-message: "docs: Update API, Helm, and Metrics reference docs for all versions"
          signoff: true
          title: "Update API, Helm, and Metrics reference docs for all versions"
          body: |
            Automated API, Helm, and Metrics documentation update for all supported versions based on the latest tags from the **kgateway** repository.
            
            This PR was automatically generated by the [**Update Reference documentation** workflow](https://github.com/kgateway-dev/kgateway.dev/actions/workflows/update-api-docs.yml).
            
            **Versions updated:**
            - Generated docs for all versions defined in `hugo.yaml`
            - Each version uses the latest corresponding tag from the kgateway repository
            - Docs are placed in versioned directories (`content/docs/{VERSION}/` and `assets/docs/snippets/{VERSION}/`)
          branch: api-gen-update
          branch-suffix: timestamp
          delete-branch: true
          base: main
          labels: |
            documentation
            automated pr