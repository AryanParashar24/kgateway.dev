---
title: Extract query parameters
weight: 50
description: Extract query parameters, transform them, and add them in to the response body. 
---

The following example walks you through how to use an Inja template to find specific query parameters in a request, extract the parameter values, and to add these values to specific response headers. 

## Before you begin

{{< reuse "docs/snippets/prereq.md" >}}

## Extract query parameters
   
1. Create a TrafficPolicy resource with your transformation rules. Make sure to create the TrafficPolicy in the same namespace as the HTTPRoute resource. In the following example, you use a regular expression to find the `foo` and `bar` query parameters in the request path and to capture their values. Then, these values are added to the response headers `foo-response` and `bar-response`.  

   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.kgateway.dev/v1alpha1
   kind: TrafficPolicy
   metadata:
     name: transformation
     namespace: httpbin
   spec:
     transformation:
       response:
         set:
         - name: foo-response
           value: '{{ regex_capture(request_header(":path"), "(?:^|[?&])foo=([^&]*)", 1) }}'
         - name: bar-response
           value: '{{ regex_capture(request_header(":path"), "(?:^|[?&])bar=([^&]*)", 1) }}'
   EOF
   ```

2. Update the HTTPRoute resource to apply the TrafficPolicy to the httpbin route by using an `extensionRef` filter.

   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.networking.k8s.io/v1
   kind: HTTPRoute
   metadata:
     name: httpbin
     namespace: httpbin
     labels:
       example: httpbin-route
   spec:
     parentRefs:
       - name: http
         namespace: kgateway-system
     hostnames:
       - "www.example.com"
     rules:
       - backendRefs:
           - name: httpbin
             port: 8000
         filters:
         - type: ExtensionRef
           extensionRef:
             group: gateway.kgateway.dev
             kind: TrafficPolicy
             name: transformation
   EOF
   ```

3. Send a request to the httpbin app and include the `foo` and `bar` query parameters. Verify that you get back a 200 HTTP response code and that the value of the `foo` and `bar` query parameters were added to the response headers `foo-response` and `bar-response`. 
   {{< tabs items="Cloud Provider LoadBalancer,Port-forward for local testing" >}}
   {{% tab %}}
   ```sh
   curl -vi "http://$INGRESS_GW_ADDRESS:8080/anything?foo=foo-value&bar=bar-value" \
    -H "host: www.example.com:8080" 
   ```
   {{% /tab %}}
   {{% tab %}}
   ```sh
   curl -vi "localhost:8080/anything?foo=foo-value&bar=bar-value" \
   -H "host: www.example.com"
   ```
   {{% /tab %}}
   {{< /tabs >}}
   
   Example output:
   ```yaml {linenos=table,hl_lines=[4,5,7,8,15,16,18,19],linenostart=1}
   ...
   {
    "args": {
      "bar": [
        "bar-value"
      ],
      "foo": [
        "foo-value"
      ]
    },
    "headers": {
      "Accept": [
        "*/*"
      ],
      "Bar-Response": [
        "bar-value"
      ],
      "Foo-Response": [
        "foo-value"
      ],
      "Host": [
        "www.example.com:8080"
      ],
      "User-Agent": [
        "curl/7.77.0"
      ],
      "X-B3-Sampled": [
        "0"
      ],
      "X-B3-Spanid": [
        "5003b7987ed56d7f"
      ],
      "X-B3-Traceid": [
        "eac0a28ecb32b9e15003b7987ed56d7f"
      ],
      "X-Forwarded-Proto": [
        "http"
      ],
      "X-Request-Id": [
        "b43982a7-cdb5-4bab-9ce5-cba0cf4c2ae5"
      ]
    },
    "origin": "127.0.0.6:41223",
    "url": "http://www.example.com:8080/anything?foo=foo-value&bar=bar-value",
    "data": "",
    "files": null,
    "form": null,
    "json": null
   }
   ```
   
## Cleanup

{{< reuse "docs/snippets/cleanup.md" >}}

1. Delete the TrafficPolicy resource.

   ```sh
   kubectl delete TrafficPolicy transformation -n httpbin
   ```

2. Remove the `extensionRef` filter from the HTTPRoute resource.

   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.networking.k8s.io/v1
   kind: HTTPRoute
   metadata:
     name: httpbin
     namespace: httpbin
     labels:
       example: httpbin-route
   spec:
     parentRefs:
       - name: http
         namespace: kgateway-system
     hostnames:
       - "www.example.com"
     rules:
       - backendRefs:
           - name: httpbin
             port: 8000
   EOF
   ```
   