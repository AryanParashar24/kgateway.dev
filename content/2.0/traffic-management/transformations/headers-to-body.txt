---
title: Add headers to body
weight: 60
description: Use extractors to capture request header values and add those values to the body. 
---

The following example walks you through how to use extractors to extract request header values by using regular expressions. The captured header values are then added to the response body by using the `mergeExtractorsToBody` setting. You can use the extractors to also indicate where you want to place the request header values in the body. 

## Before you begin

{{< reuse "docs/snippets/prereq.md" >}}

## Add header values to the response body
   
1. Create a TrafficPolicy resource with your transformation rules. Make sure to create the TrafficPolicy in the same namespace as the HTTPRoute resource. In the following example, you extract the `root` and `nested` request headers and add them to the response body by using the `mergeExtractorsToBody` setting. The dot notation that you use for the extractor names determines the placement of the header in the body. For example, if no dot notation is used, such as in `root`, the header is added to the body's root level. If dot notation is used, such as in `payload.nested`, the extractor is added under the `payload.nested` field. 

   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.kgateway.dev/v1alpha1
   kind: TrafficPolicy
   metadata:
     name: transformation
     namespace: httpbin
   spec:
     transformation:
       request:
         body:
           parseAs: AsJson
           value: >-
             {
               "root": "{{ request_header('root') }}",
               "payload": {
                 "nested": "{{ request_header('nested') }}"
               }
             }
   EOF
   ```

2. Update the HTTPRoute resource to apply the TrafficPolicy to the httpbin route by using an `extensionRef` filter.

   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.networking.k8s.io/v1
   kind: HTTPRoute
   metadata:
     name: httpbin
     namespace: httpbin
     labels:
       example: httpbin-route
   spec:
     parentRefs:
       - name: http
         namespace: kgateway-system
     hostnames:
       - "www.example.com"
     rules:
       - backendRefs:
           - name: httpbin
             port: 8000
         filters:
         - type: ExtensionRef
           extensionRef:
             group: gateway.kgateway.dev
             kind: TrafficPolicy
             name: transformation
   EOF
   ```

3. Send a request to the httpbin app and include the `root` and `nested` request headers. Verify that you get back a 200 HTTP response code and that the value of the `root` header is added to the body's root level, and that the `nested` header value is added under the `payload.nested` field in your response. 
   {{< tabs items="Cloud Provider LoadBalancer,Port-forward for local testing" >}}
   {{% tab %}}
   ```sh
   curl -X POST http://$INGRESS_GW_ADDRESS:8080/post \
   -H "host: www.example.com:8080" \
   -H "Content-Type: application/json" \
   -H "root: root-val" \
   -H "nested: nested-val" \
   -d '{"existing": "data"}' | jq
   ```
   {{% /tab %}}
   {{% tab %}}
   ```sh
   curl -X POST localhost:8080/post \
   -H "host: www.example.com" \
   -H "Content-Type: application/json" \
   -H "root: root-val" \
   -H "nested: nested-val" \
   -d '{"existing": "data"}' | jq
   ```
   {{% /tab %}}
   {{< /tabs >}}
   
   Example output: 
   ```yaml {linenos=table,hl_lines=[3,4,6],linenostart=1}
   ...
   "json": {
    "payload": {
      "nested": "nested-val"
    },
    "root": "root-val"
   }
   ```
   
## Cleanup

{{< reuse "docs/snippets/cleanup.md" >}}

1. Delete the TrafficPolicy resource.

   ```sh
   kubectl delete TrafficPolicy transformation -n httpbin
   ```

2. Remove the `extensionRef` filter from the HTTPRoute resource.

   ```yaml
   kubectl apply -f- <<EOF
   apiVersion: gateway.networking.k8s.io/v1
   kind: HTTPRoute
   metadata:
     name: httpbin
     namespace: httpbin
     labels:
       example: httpbin-route
   spec:
     parentRefs:
       - name: http
         namespace: kgateway-system
     hostnames:
       - "www.example.com"
     rules:
       - backendRefs:
           - name: httpbin
             port: 8000
   EOF
   ```
   